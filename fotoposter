
import os
import time
from datetime import datetime
from atproto import Client

# === CONFIG ===
FEED_URI = "at://did:plc:jaka644beit3x4vmmg6yysw7/app.bsky.feed.generator/aaaaph4xy7utg"
MAX_POSTS_PER_RUN = 25
MAX_POSTS_PER_USER = 5
TOTAL_RUN_MINUTES = 30  # Verdeel reposts over 30 minuten

def log(msg: str):
    now = datetime.now().strftime("%H:%M:%S")
    print(f"[{now}] {msg}")

def login(username: str, password: str) -> Client:
    client = Client()
    client.login(username, password)
    return client

def get_new_feed_posts(client: Client, feed_uri: str):
    feed = client.app.bsky.feed.get_feed({"feed": feed_uri, "limit": 100}).feed
    new_posts = []
    for item in reversed(feed):  # oudste eerst
        post = item.post
        new_posts.append({
            "uri": post.uri,
            "cid": post.cid,
            "author": post.author.did
        })
    return new_posts

def repost_feed(client: Client, feed_uri: str):
    log(f"Fetching feed: {feed_uri}")
    posts = get_new_feed_posts(client, feed_uri)

    seen_uris = set()
    reposted_count = 0
    per_user = {}

    # Filter alvast op limieten
    filtered_posts = []
    for post in posts:
        if len(filtered_posts) >= MAX_POSTS_PER_RUN:
            break
        if per_user.get(post["author"], 0) >= MAX_POSTS_PER_USER:
            continue
        per_user[post["author"]] = per_user.get(post["author"], 0) + 1
        filtered_posts.append(post)

    total_to_repost = len(filtered_posts)
    if total_to_repost == 0:
        log("Geen nieuwe posts om te reposteren.")
        return

    delay_per_post = int((TOTAL_RUN_MINUTES * 60) / total_to_repost)
    log(f"Verdeel {total_to_repost} reposts over {TOTAL_RUN_MINUTES} minuten (~{delay_per_post}s per repost)")

    for idx, post in enumerate(filtered_posts, start=1):
        try:
            # === Repost ===
            client.app.bsky.feed.repost.create(
                repo=client.me.did,
                record={
                    "subject": {"uri": post["uri"], "cid": post["cid"]},
                    "createdAt": client.get_current_time_iso(),
                    "$type": "app.bsky.feed.repost",
                },
            )
            log(f"‚úÖ ({idx}/{total_to_repost}) Reposted {post['uri']}")

            # === Like ===
            client.app.bsky.feed.like.create(
                repo=client.me.did,
                record={
                    "subject": {"uri": post["uri"], "cid": post["cid"]},
                    "createdAt": client.get_current_time_iso(),
                    "$type": "app.bsky.feed.like",
                },
            )
            log(f"‚ù§Ô∏è ({idx}/{total_to_repost}) Liked {post['uri']}")

            reposted_count += 1

            if idx < total_to_repost:
                log(f"‚è± Wachten {delay_per_post}s voor volgende repost...")
                time.sleep(delay_per_post)

        except Exception as e:
            log(f"‚ùå Fout bij {post['uri']}: {e}")

    log(f"üéØ Klaar: {reposted_count} reposts uitgevoerd (+ likes).")

def main():
    username = os.getenv("BSKY_USERNAME")
    password = os.getenv("BSKY_PASSWORD")

    if not username or not password:
        log("‚ùå Geen inloggegevens gevonden.")
        return

    client = login(username, password)
    repost_feed(client, FEED_URI)

if __name__ == "__main__":
    main()